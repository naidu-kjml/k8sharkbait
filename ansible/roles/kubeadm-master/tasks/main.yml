# Tasks to bootstrap a kubernetes cluster via kubeadm
# This role assumes that:
# All nodes have certificate-based IPsec enabled between them
# All nodes are etcd members
# Etcd is using the same certificates as IPsec
# All required configuration has been set up already
# Kubelet is configured as we want and running (and crashlooping)
- name: reset cluster
  command: kubeadm reset
  register: reset_cluster

- name: generate a join token
  command: kubeadm token generate
  register: kubeadm_out

- name: print join token
  debug:
    msg: "{{ kubeadm_out.stdout_lines[-1] }}"

- name: save join token to fact cache
  set_fact:
    kubeadm_token: "{{ kubeadm_out.stdout_lines[-1] }}"
    cacheable: true

- name: deploy master configuration file
  template:
    src: master-configuration.yml.j2
    dest: /tmp/master-configuration.yml
    owner: root

- name: initialize the cluster
  when: reset_cluster|succeeded
  command: kubeadm init --config /tmp/master-configuration.yml --ignore-preflight-errors=swap
  register: cluster_initialized

# Create ~/.kube/ and copy configuration file
- name: Allow user access to kube/config
  file:
    path: /etc/kubernetes/admin.conf
    mode: 0775

- name: Create kubernetes config directory for user
  become: false
  file:
    path: "~/.kube/"
    state: directory

- name: Copy admin config into user home directory
  when: cluster_initialized
  become: false
  copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "~/.kube/config"
    owner: "{{ remote_user_name }}"
    group: "{{ remote_user_name }}"
    mode: 0755
    remote_src: True

- name: Enable and restart kubelet
  systemd:
    name: kubelet
    daemon_reload: yes
    state: restarted
    enabled: yes


- name: Get kubectl version
  become: false
  shell: >
    kubectl version | base64 | tr -d '\n'
  register: kubectl_out

- name: print kubectl version
  debug:
    msg: "{{ kubectl_out.stdout_lines[-1] }}"

- name: Set kubectl version
  set_fact:
    kubectl_version: "{{ kubectl_out.stdout_lines[-1] }}"

- name: Install weave addon
  become: false
  command: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version={{ kubectl_version }}"

- name: Confirm weave is installed
  become: false
  shell: kubectl get pods -n kube-system -l name=weave-net
  register: result
  until: result.stdout.find("Running") != -1
  retries: 100
  delay: 10
